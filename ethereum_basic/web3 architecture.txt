https://www.preethikasireddy.com/post/the-architecture-of-a-web-3-0-application
*하이라이트
1.web3 : 프론트엔드(ipfs에 저장)->(json-rpc)노드 프로바이더, ipfs->블록체인
ipfs는 블록체인에 모든 데이터를 담게 되면 비용이 비싸지기 때문에 대체재로 사용하는 것이다.

*기본 구성 요소
블록체인 : p2p 노드 네트워크에 의해 유지 관리되는 전역적으로 엑세스가 가능한 결정적인 상태머신.
스마트계약 : 상태변경 논리 정의하는 프로그램.
evm : 스마트 계약에 정의된 로직을 실행하고 전역적으로 엑세스 가능한 이 상태 머신에서 발생하는 상태 변경을 처리하는 이더리움 가상머신.
      솔리디티와 같은 고급언어는 이해하지 못하기 때문에 바이트 코드로 컴파일 해야 evm 실행이 가능하다.
프론트엔드 : ui 로직 정의하는 부분 + 스마트 계약에 정의된 애플리케이션 로직과도 통신함.

*web2 vs wbe3
web2 시스템은 클라이언트-frontend-backend-database으로 이루어져있다.
클라이언트에서 요청을 보내면 중앙서버가 응답을 보내는 구조이다.
web3는 중앙서버 대신 블록체인을 활용한다.
블록체인이라고 불리는 상태머신은 매우 엄격한 규칙을 따른다.
클라이언트-frontend-(스마트 컨트랙트)evm-blockchain(여러명에 의해 공유)로 구성돼있다.

*프론트엔드 코드와 이더리움 스마트 컨트랙트의 통신 방법
이더 네트워크의 모든 노드는 모든 스마트 컨트랙트 코드 및 데이터를 포함하고 있습니다.
블록체인의 데이터 및 코드와 상호작용하려면 노드 중 하나와 상호작용해야 한다.
새 트랜잭션을 브로드캐스트하기 위해서는 노드와 소통해야 하는데 이떄 자체 노드를 설정하거나 타사 서비스를 사용하는 방법이 있다.
전체 노드를 설정하는것은 시간, 비용적으로 힘든 일이다. 때문에 타사의 서비스를 사용하는 경우가 대부분이다.
클라이언트-frontend-alchemy,infura 등 노드 제공자-(스마트 컨트랙트)evm-blockchain(여러명에 의해 공유)로 구성돼있다.
프론트엔드와 타사 노드가 통신할 떄는 json rpc 프로토콜을 사용한다.

*dapp사용을 위한 기본 조건
모든 클라이언트가 연결할 중앙 서버가 없습니다. 
즉, 이상적인 탈중앙화 세계에서, Dapp(탈중앙화 애플리케이션)과 상호 작용하려는 모든 사람은 컴퓨터/스마트콘 등의 기기에 실행중인 블록체인의 전체 복사본이 필요합니다. 
즉, 애플리케이션을 사용하려면 먼저 전체 블록체인을 다운로드한 다음 애플리케이션 사용을 시작해야 합니다. 
우리가 사는 세계는 이상적인 세계가 아니기에,모든 사람들이 이러한 앱을 사용하기 위해 블록체인 서버를 운영할 것으로 기대하는 것은 무리입니다. 
하지만 탈중앙화의 배경은 단일/중앙화된 서버에 의존하지 않는 것입니다. 
그래서 제안된 몇 가지 솔루션(블록체인 서버 호스팅 서비스, Metamask 등)를 사용하면 하드 디스크와 RAM을 많이 사용하지 않아도 블록체인의 전체 복사본을 다운로드하고 실행하면서도 탈중앙화를 훼손하지 않을 수 있습니다.
이때 등장하는 것이 json-rpc이다.
json-rpc에서 rpc란 다른 데이터베이스에 있는 함수나 프로시저를 실행할 수 있는 프로세스간 통신 기술이다.
json으로 인코딩된 원격 프로시저 호출을 json-rpc라고 부른다.
즉 복사본 없이도 다른 서버에 있는 복사본을 사용해 애플리케이션을 사용할 수 있도록 하는 통신 기술이라고 보면 된다.
메타마스크에서 네트워크를 추가할 때 rpc url을 추가하는 부분이 있는데 이부분을 좀더 쉽게 풀어쓰면 어떤 주소의 복사본을 사용할지 선택하는 곳이라고 보면 된다.

*블록체인의 스토리지
모든 스마트 계약과 데이터가 이더리움 블록체인에 완전히 존재하는 앱을 구축하는 경우가 있고 아닌 경우도 있다.
블록체인에 모든 코드를 올리려면 비용이 많이 든다.
새 데이터를 추가할 때마다 추가적인 비용을 지불해야 한다. 
또한 이는 노드 비용의 증가로 이어지기도 한다.
이를 해결하고자 ipfs, swarm과 같은 분산형 오프체인 스토리지 솔루션이 나왔다.
ipfs는 데이터를 저장하고 액세스하기 위한 분산 파일 시스템이다.
데이터를 중앙 집중식 데이터 베이스에 저장하는 대신 p2p네트워크에 배포하고 저장한다.
파일코인이 대표적이다. 
프론트엔드 코드도 담길 수 있다.
프론트엔드 코드는 사용자와 소통의 핵심인데 web2와 같이 중앙서버에 저장되는 경우가 많은데 분산형 스토리지에 저장하면 중앙 서버에 저장하지 않아도 된다.

*블록체인 쿼리
스마트 콘트랙트에서 데이터를 읽는 방법
스마트 콘트랙트 이벤트, 그래프
스마트 콘트랙트 이벤트를 쿼리하고 수신할 수 있습니다.
이 방법은 콘트랙트 배포 당시 포함되지 않은 이벤트가 발생하면 다시 배포해야 하고
콜백을 사용하여 다양한 ui로직 처리하는 것이 힘듭니다.
이런 문제를 해결하기 위해 등장한 것이 그래프입니다.
그래프는 이더리움 블록체인에서 데이터를 쉽게 쿼리할 수 있게 해주는 오프체인 인덱싱 솔루션입니다.
그래프ql을 쿼리로 사용합니다.

*dapp확장