https://takenobu-hs.github.io/downloads/ethereum_evm_illustrated.pdf
*storage, memory, calldata
-storage란?
스토리지에 배치되면 변수가 블록체인에 기록됩니다. 
체인에 있는 모든 것은 그대로 유지됩니다. 
모든 계약에는 자체 저장소가 있으므로 이러한 변수는 영구적입니다. 
따라서 항상 스토리지 변수에 액세스할 수 있습니다. 
값을 수정할 수 있지만 위치는 영구적입니다. 
모든 변경 사항은 블록체인에 등록됩니다.
-memory란?
function에 저장된 변수는 function 내에서 선언됩니다. 
그들은 임시적이고 '수명'은 해당 기능의 런타임에 따라 다릅니다. 
해당 function 내에서만 액세스할 수 있습니다. 
그들의 목적은 계산을 돕는 것입니다. 
또한 EVM은 기능 실행 후 위치를 버립니다. 
function 내부가 아닌 다른 곳에서는 이러한 변수에 액세스할 수 없습니다.
-calldata란?
Calldata는 Solidity의 임시 데이터 위치이기도 합니다. 
함수 실행에 대한 종속성 측면에서 메모리처럼 작동합니다. 
calldata에 저장된 변수는 선언된 함수 내에서만 사용할 수 있습니다.
게다가 calldata 변수는 수정할 수 없습니다.
이는 해당 값을 변경할 수 없음을 의미합니다. 
-가스비용
가스비용 : storage > memory > calldata
storage의 전역 데이터를 변경하는 것은 가스비가 많이 드는 작업이다.
좋은 컨트랙트에서는 이런 변경을 줄여야 한다.

*Gas
EOA(Externally owned account)->Gas supply + message ->CA(contract account)
                                        <- refund
이더리움 상의 모든 계산은 수수료를 받는다.
pc -> evmcode->operations(Gas)->stack->memory or storage(more gas)
                              ->message call(more gas)
message call과 storage 사용을 최소하하는 것이 gas를 줄이는 방법이다.

*Input and Output of EVM
evm은 message call로부터 input데이터를 받을 수 있다.
evmcode가 실행되는 evm은 log를 return하거나 caller evm에 return값을 준다.
input데이터에는 CALLDATALOAD, CALLDATACOPY가 있고 전자는 stack에 후자는 memory에 들어간다.

*Byte order
