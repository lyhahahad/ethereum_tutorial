evm :바이트코드 명령어를 실행하여 시스템 상태를 한 상태에서 다른 상태로 변환하는 간단한 스택 기반 실행 기계입니다.
이더리움 프로토콜 자체는 이 특수 상태 머신의 지속적이고 중단되지 않으며 변경할 수 없는 작동을 유지하기 위한 목적으로만 존재합니다.
evm은 블록에서 블록으로 새로운 유효한 상태를 계산하기 위한 규칙을 정의합니다.
비트코인은 주소가 이전에 받은 것보다 더 많은 비트코인을 사용할 수 없도록 하는 규칙을 지킨다.
이더리움은 같은 기능을 하지만 스마트 계약도 가능하다.
이더리움은 단순히 원장이 아니라 상태 머신이다.
이더리움의 상태는 모든 계정의 잔액뿐만 아니라 미리 정의된 규칙 집합에 따라 블록에서 블록으로 변경할 수 있고 임의의 기계 코드를 실행할 수 있는 기계 상태를 보유한 대규모 데이터 구조이다.
블록에서 블록으로 상태를 변경하는 특정 규칙은 evm에 의해 정의된다.
EVM에서 실행되는 코드는 네트워크나 파일 시스템과 같은 외부 리소스에 액세스할 수 없습니다. 
=ipc 통신이 불가능하다?(프로세스간 통신이 불가능하다?)
evm은 스택 기반 아키텍처이다.
주요 스토리지
1.메모리 : 휘발성 메모리, 계약 코드가 실행되고 나면 메모리가 지워짐. ram과 유시.
무제한이지만 가스 요금 요구 사항에 의해 제한됨.
2.저장소 : 블록체인에 영구적으로 유지. 하드디스크 스토리지라고 생각하면 된다.
3.스택 : 모든 계산이 수행되는 영역, 모든 메모리 내 값도 스택에 저장됨. 
4.rom : 프로그램 코드가 저장되는 부분.
rom에서 프로그램 코드가 실행되면 rom이 codecopy 명령어를 사용해 메인메모리에 프로그램 코드 복사 저장.
프로그램 카운터를 참조하여 evm에서 메인 메모리를 읽고 단계별로 실행.
=>이더리움은 모든 계정의 잔액뿐만 아니라 미리 정해진 규칙의 집합(스마트 컨트랙트)에 의해 블록에서 블록으로 변경사항을 저장할 수 있다.


machine state(volatile) : pc + gas available + stack + memory
account(storage)
evm code

evm은 수학함수처럼 작동한다.
이더리움의 상태전환 기능은 수학함수처럼 작동하는데 변수로는 유요한 상태와 새로운 트랜잭션 세트이다.
두가지가 함수에 들어가면 새로운 유요한 상태가 출려된다.
여기서 상태는 모든 계정을 해시로 연결하고 블록체인에 저장된 단일 루트 해시로 축소할 수 있는 머클트리이다.

https://cypherpunks-core.github.io/ethereumbook/13evm.html
evm은 스마트 컨트랙트를 배포하고 실행 처리하는 이더리움의 일부로 
높은 수준에서는 이더리움 블록체인에서 실행되는 evm은 
자체 영구 데이터 저장소가 있는 수백만개의 실행가능한 개체를 포함하는 글로벌 분산 컴퓨터이다.
evm은 준 튜링 완전 상태 머신인데 '준'은 스마트 컨트랙트 실행시 가스의 양에 따라 유한한 계산 단계 수로 제한되기 때문이다.
evm은 스택기반 아키텍처이다.
모든 메모리 값을 스택에 저장한다. 
rom : 실행할 스마트 컨트랙트의 바이트코드와 함께 로드된 변경할 수 없는 프로그램 코드.
메모리 : 모든 위치가 명시적으로 0으로 초기화된 휘발성 메모리.
영구 저장소 : 이더리움 상태의 일부

evm : evm에서 실행되는 코드는 네트워크나 파일 시스템, 기타 프로세스들에 접근할 수 없다.
-계정 : 외부계정(사람이 가지고 있는 공개키, 비밀키 쌍에 의해 동작)
스마트컨트랙트계정(계정과 함께 저장된 코드에 의해 동작.) 
-트랜잭션 : 대상 계정이 코드를 포함하고 있는 스마트 컨트랙트 계정이라면 코드는 실행되고 
페이로드(다른 계정으로 보내는 메시지의 일종)는 입력 데이터로 제공된다.
컨트랙트가 생성되는 동안, 컨트랙트 코드는 비어있다. 생성자가 실행을 끝낼 때까지 컨트랙트를 다시 호출해서는 안된다.
-가스 : 
-스토리지, 메모리와 스택
스토리지 : 함수호출과 트랜잭션 사이에서 영구적으로 존재.
메모리ㅡ 스택머신 기반.
-명령어 집합.